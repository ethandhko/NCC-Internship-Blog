{
  
    
        "post0": {
            "title": "Pandas Commands",
            "content": "import pandas import pandas as pd import altair as alt . About . This blog post displays several Pandas commands that have helped me throughout this internship. I have seperated the commands into four categories: general dataframes commands, column commands, row commands, and CPTAC commands. I hope this post will be helpful to those who are new to Pandas or just need a reminder of the commands. . General Dataframe Commands . df = pandas.read_csv(&#39;name of file.tsv&#39;, sep = &#39; t&#39;) . df = pandas.read_excel(&#39;name of file.xlsx&#39;) . df = ({&#39;Cost&#39;:[1, 2, 3], &#39;Revenue&#39;: [4, 5, 6]}) df = pd.DataFrame(df) . #Display Dataframe df . Cost Revenue . 0 1 | 4 | . 1 2 | 5 | . 2 3 | 6 | . . #Transpose Dataframe df.transpose() . 0 1 2 . Cost 1 | 2 | 3 | . Revenue 4 | 5 | 6 | . . #View datatypes, columns, index, and memory usage df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 3 entries, 0 to 2 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 Cost 3 non-null int64 1 Profit 3 non-null int64 dtypes: int64(2) memory usage: 176.0 bytes . . Column Commands . #Edit Title of a column df.rename(columns = {&#39;Revenue&#39; : &#39;Profit&#39;}, inplace=True) df . Cost Profit . 0 1 | 4 | . 1 2 | 5 | . 2 3 | 6 | . . #Add a new column Price = [7, 8, 9] df[&#39;Price&#39;] = Price df . Cost Profit Price . 0 1 | 4 | 7 | . 1 2 | 5 | 8 | . 2 3 | 6 | 9 | . . #Remove a column df.drop(columns=[&#39;Price&#39;], inplace=True) df . Cost Profit . 0 1 | 4 | . 1 2 | 5 | . 2 3 | 6 | . . #Add a value to dataframe df += 1 df . Cost Profit . 0 3 | 6 | . 1 4 | 7 | . 2 5 | 8 | . . #Subtract a value to dataframe df -= 1 df . Cost Profit . 0 1 | 4 | . 1 2 | 5 | . 2 3 | 6 | . . Rows . #Find a row based off its index df.loc[0] . Cost 1 Profit 4 Name: 0, dtype: int64 . . #Find a row based off value filt = (df[&#39;Cost&#39;] == 2) df[filt] . Cost Profit . 1 2 | 5 | . . #Find rows without missing values df.Cost.notnull() . 0 True 1 True 2 True Name: Cost, dtype: bool . . CPTAC Commands . import cptac . #View all datasets cptac.list_datasets() . Description Data reuse status Publication link . Dataset name . Brca breast cancer | no restrictions | https://pubmed.ncbi.nlm.nih.gov/33212010/ | . Ccrcc clear cell renal cell carcinoma (kidney) | no restrictions | https://pubmed.ncbi.nlm.nih.gov/31675502/ | . Colon colorectal cancer | no restrictions | https://pubmed.ncbi.nlm.nih.gov/31031003/ | . Endometrial endometrial carcinoma (uterine) | no restrictions | https://pubmed.ncbi.nlm.nih.gov/32059776/ | . Gbm glioblastoma | no restrictions | https://pubmed.ncbi.nlm.nih.gov/33577785/ | . Hnscc head and neck squamous cell carcinoma | no restrictions | https://pubmed.ncbi.nlm.nih.gov/33417831/ | . Lscc lung squamous cell carcinoma | no restrictions | https://pubmed.ncbi.nlm.nih.gov/34358469/ | . Luad lung adenocarcinoma | no restrictions | https://pubmed.ncbi.nlm.nih.gov/32649874/ | . Ovarian high grade serous ovarian cancer | no restrictions | https://pubmed.ncbi.nlm.nih.gov/27372738/ | . Pdac pancreatic ductal adenocarcinoma | no restrictions | https://pubmed.ncbi.nlm.nih.gov/34534465/ | . UcecConf endometrial confirmatory carcinoma | password access only | unpublished | . GbmConf glioblastoma confirmatory | password access only | unpublished | . . #Download a dataset cptac.download(dataset = &quot;name of dataset&quot;) .",
            "url": "https://ethandhko.github.io/NCC-Internship-Blog/fastpages/jupyter/2022/07/26/Pandas-Comms.html",
            "relUrl": "/fastpages/jupyter/2022/07/26/Pandas-Comms.html",
            "date": " • Jul 26, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Five Week Experience",
            "content": "Week 1 . Now more than ever, multi-omics data has become imperative to understanding cancer and its mechanisms. Therefore, week 1 was generally spent getting comfortable with the idea of proteomics and multi-omics data along with its implications on modern science. . I spent a majority of my time attempting to understand what this type of data looked like, as I had never been exposed to it before. It involved a lot of researaching, scrolling through data, and attempting to understand visualizations. . . Week 2 . Week 2 was when I really began diving deeper into data analysis. Through trial and error, I downloaded the OmiEmbed software onto my computer. This software assists with multi-task deep learning of datasets. The installation process was a lot more difficult than I had expected, as there were many supplementary softwares I needed to download, as well as errors that I ran into. Therefore, to help others out in their future OmiEmbed installation endeavors, I created a step-by-step guide on how to install the software on my Google Site. . After installation, I tested out running the train_test files on my computer, which I was able to produce some visualizations with. Mr.Kim was able to teach me more about the importance of train and test files, and its importance for machine learning. . I also began to branch out into my own reserach topic which surrounded cancer metastasis in thyroid cancer. I am currently writing and publishing a research paper on the effect of radiotherapy on distant metastsis in papillary thyroid cancer. To connect my internship experience and my writing together, I decided that by engaging in multi-omics data analysis around cancer metastsis in thyroid cancer would be helpful to my research. . Week 3 . During Week 3, Mr.Kim gave us the task to engage in exploratory data anlysis for datasets from the PDC and a Nature article. Firstly, I began to research what exploratory data anlysis was. I learned that it meant to expose yourself to unfamiliar data and attempt to understand it through investigating patterns, anomalies, and testing hypotheses. . To carry out this task, I began to learn how to use Pandas. Pandas is an application that assists with data cleaning and manipulation. It also provides efficient visualizations of data. In order to learn and get comfortable with Pandas’ numerous commands, I created a Pandas command list that I uploaded in my previous blog, and on my Google Site. By learning how to use pandas to analyze data, I was able to spot patterns in data that I presented in my week 3 presentation. Though the analysis wasn’t very deep or intricate, it was still a great introduction for me to learn more about exploratory data anlysis and its importance. . Week 4 . Mr.Kim gave us the task of uploading datasets from CPTAC onto Omics Playground. Omics Playground is a software that creates and displays efficient and clear visualizations for data analysts. However, the upload process for Omics Playground is rigorous, requiring sample and counts data in the form of .csv. Majority of this week was spent attempting to upload CPTAC datasets to Omics Playground. Eventually, after several forms of data cleaning and editing, I was able to upload the CPTAC Glioblastoma dataset to Omics Playground (see screenshot below). . In addition to uploading the data to Omics Playground, I documented my progress and provided a step-by-step guide to uploading the data on my week 4 presentation. . . Week 5 . The final week of this internship was arguably the most difficult of all. . The first task I was given based on Mr.Kim’s feedback of week 4’s progress was to edit the glioblastoma data to only include positive values, and to upload it to Omics Playground. Originally, the mean of the data was set to zero, therefore the data included many negative values. After changing the values to all be positive, and analyzing the visuals on Omics Playground, I found that the clustered heatmaps of each exhibited drastically different visuals. . . I noticed that the updated data was much smoother in contrast between the original data that displays jagged changes in blue and red. After doing additional reserach, I was able to find that it is better to have all data values positive, as in some cases it provides more accurate visualizations. .",
            "url": "https://ethandhko.github.io/NCC-Internship-Blog/markdown/2020/07/26/Five-Week-Experience.html",
            "relUrl": "/markdown/2020/07/26/Five-Week-Experience.html",
            "date": " • Jul 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ethandhko.github.io/NCC-Internship-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ethandhko.github.io/NCC-Internship-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ethandhko.github.io/NCC-Internship-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ethandhko.github.io/NCC-Internship-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}